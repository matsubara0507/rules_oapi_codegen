_CODEGEN_TOOL = "@com_github_deepmap_oapi_codegen//cmd/oapi-codegen:oapi-codegen"

def _oapi_codegen_impl(ctx):
    args = []
    if len(ctx.attr.generate) > 0:
        args += ["-generate", ",".join(ctx.attr.generate)]

    if ctx.attr.package != None:
        args += ["-package", ctx.attr.package]

    args.append(ctx.file.spec.path)
    ctx.actions.run_shell(
        outputs = [ctx.outputs.out],
        inputs = [ctx.file.spec],
        tools = [ctx.file.oapi_codegen_tool],
        command = """{cmd} {args} > {out}""".format(
            cmd = "$(pwd)/" + ctx.file.oapi_codegen_tool.path,
            args = " ".join(args),
            out = ctx.outputs.out.path,
        ),
    )

oapi_codegen = rule(
    _oapi_codegen_impl,
    attrs = {
        "spec": attr.label(
            doc = "Configuration file. It can be JSON or YAML.",
            mandatory = True,
            allow_single_file = [
                ".json",
                ".yaml",
            ],
        ),
        "out": attr.output(
            doc = "The new Go file to emit the generated by oapi-codegen",
            mandatory = True,
        ),
        "package": attr.string(
            doc = "The name of the package the generated mocks should be in. If not specified, uses oapi-codegen's default.",
        ),
        "generate": attr.string_list(
            doc = "List of code to generate",
        ),
        "oapi_codegen_tool": attr.label(
            doc = "The oapi-codegen tool to run",
            default = Label(_CODEGEN_TOOL),
            allow_single_file = True,
            executable = True,
            cfg = "exec",
            mandatory = False,
        ),
    },
)
